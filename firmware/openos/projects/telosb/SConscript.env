import os

Import('env')

#======================== Help text =============================
Help(os.linesep.join(('',
                      'TelosB options:',
                      '  upload=<device>      Use mspdebug to upload to device',
                      '',
                    ))
    )


#======================== Project setup =========================

# create build environment
buildEnv = env.Clone()

# inherit environment from user (PATH, etc)
buildEnv['ENV'] = os.environ

# choose bsp. Normally this would be the same as the project name,
# however, there are cases where one might want to make separate build
# configuration for the same board.
buildEnv['BSP'] = buildEnv['PROJECT']

# include project/bsp-specific directories
buildEnv.Append(CPPPATH = [os.path.join('#','firmware','openos','bsp','boards',env['PROJECT']),
                          ])

buildEnv.Replace(CC = 'msp430-gcc')
buildEnv.Replace(LINK = 'msp430-gcc')
buildEnv.Replace(AR = 'msp430-ar')
buildEnv.Replace(RANLIB = 'msp430-ranlib')

flags = '-mmcu=msp430f1611 -Os'

buildEnv.Append(CCFLAGS = flags)
buildEnv.Append(LINKFLAGS = flags)
buildEnv.Append(ARFLAGS = '')
buildEnv.Append(RANLIBFLAGS = '')

# PostBuildExtras is a method called after build of a firmware target (not libraries).
# Put any addition steps in this function, such as converting to ihex or copying the
# binary somewhere.
def extras(env, source):
    if 'upload' in ARGUMENTS:
        return [env.Size(source=source), env.Upload(env.HexOut(source))]
    else:
        return [env.Size(source=source), env.HexOut(source)]
buildEnv.AddMethod(extras, 'PostBuildExtras')


#======================== Private ===============================

# Builder that copies the binary into an ihex format for upload
hexout = Builder(action = 'msp430-objcopy --output-target=ihex $SOURCE $TARGET',
                 suffix = '.ihex')
buildEnv.Append(BUILDERS = {'HexOut' : hexout})

# For uploading
def uploader(device):
    return Builder(action = 'mspdebug -d {} -j uif "prog $SOURCE"'.format(device),
                   suffix = '.phonyupload',
                   src_suffix = '.ihex')
if 'upload' in ARGUMENTS:
    buildEnv.Append(BUILDERS = {'Upload' : uploader(ARGUMENTS['upload'])})

# For printing build results
size = Builder(action = 'msp430-size $SOURCE', suffix = '.phonysize')
buildEnv.Append(BUILDERS = {'Size' : size})

Return('buildEnv')
