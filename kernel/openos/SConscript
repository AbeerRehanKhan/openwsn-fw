import os

Import('env')

localEnv = env.Clone()

target    =  'libopenos'
sources_c = [
    'scheduler.c',
]
sources_h = [
    'scheduler.h',
]

if localEnv['board']=='python':
    
    for s in sources_c+sources_h:
        temp = localEnv.Objectify(
            target = localEnv.ObjectifiedFilename(s),
            source = s,
        )
        #localEnv.AlwaysBuild(temp)
    
    libopenos = localEnv.Library(
        target = target,
        source = [localEnv.ObjectifiedFilename(s) for s in sources_c],
    )
    localEnv.Depends(libopenos,[localEnv.ObjectifiedFilename(s) for s in sources_h])

else:
    
    localEnv.Append(
        CPPPATH =  [
            os.path.join('#','openwsn'),
            os.path.join('#','openwsn','02a-MAClow'),
            os.path.join('#','openwsn','02b-MAChigh'),
            os.path.join('#','openwsn','03a-IPHC'),
            os.path.join('#','openwsn','03b-IPv6'),
            os.path.join('#','openwsn','04-TRAN'),
            os.path.join('#','openwsn','07-App','tcpinject'),
            os.path.join('#','openwsn','07-App','udpinject'),
            os.path.join('#','openwsn','cross-layers'),
            os.path.join('#','drivers','common'),
        ],
    )
    
    libopenos = localEnv.Library(
        target = target,
        source = sources_c,
    )

Alias('libopenos', libopenos)